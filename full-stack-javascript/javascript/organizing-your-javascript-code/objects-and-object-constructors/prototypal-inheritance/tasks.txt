1) Here’s the code that creates a pair of objects, then modifies them:
let animal = {
  jumps: null
};

let rabbit = {
  __proto__: animal,
  jumps: true
};

alert( rabbit.jumps ); // ? (1)
delete rabbit.jumps;
alert( rabbit.jumps ); // ? (2)
delete animal.jumps;
alert( rabbit.jumps ); // ? (3)

Which values are shown in the process?
true, taken from rabbit.
null taken from animal.
undefined, there's no such property anymore.
--------------------------------------------------------------------------------
2) Given the following objects:
let head = {
  glasses: 1
};

let table = {
  pen: 3
};

let bed = {
  sheet: 1,
  pillow: 2
};

let pockets = {
  money: 2000
};
a) Use __proto__ to assign prototypes in a way that any property lookup will 
follow the path: pockets → bed → table → head. For instance, pockets.pen should 
be 3 (found in table), and bed.glasses should be 1 (found in head).
let head = {
  glasses: 1
};

let table = {
  pen: 3,
  __proto__: head
};

let bed = {
  sheet: 1,
  pillow: 2,
  __proto__: table
};

let pockets = {
  money: 2000,
  __proto__: bed
};

b) Answer the question: is it faster to get glasses as pockets.glasses or 
head.glasses? Benchmark if needed.
In modern engines, performance-wise, there’s no difference whether we take a 
property from an object or its prototype. They remember where the property was 
found and reuse it in the next request. 

For instance, for pockets.glasses they remember where they found glasses 
(in head), and next time will search right there. They are also smart enough to 
update internal caches if something changes, so that optimization is safe.
--------------------------------------------------------------------------------
3) We have rabbit inheriting from animal:
let animal = {
  eat() {
    this.full = true;
  }
};

let rabbit = {
  __proto__: animal
};

rabbit.eat();

If we call rabbit.eat(), which object receives the full property: animal or 
rabbit?
rabbit. This is because this is refers to the object before the dot, so 
rabbit.eat() modifies rabbit. 

Property lookup and execution are two different things. The method rabbit.eat
is first found in the prototype, then executed with this=rabbit.
--------------------------------------------------------------------------------
4) We have two hamsters: speedy and lazy inheriting from the general hamster 
object.
let hamster = {
  stomach: [],

  eat(food) {
    this.stomach.push(food);
  }
};

let speedy = {
  __proto__: hamster
};

let lazy = {
  __proto__: hamster
};

// This one found the food
speedy.eat("apple");
alert( speedy.stomach ); // apple

// This one also has it, why? fix please.
alert( lazy.stomach ); // apple

When we feed one of them, the other one is also full. Why? How can we fix it?
let hamster = {
  stomach: [],

  eat(food) {
    this.stomach.push(food);
  }
};

let speedy = {
  __proto__: hamster,
  stomach: []
};

let lazy = {
  __proto__: hamster,
  stomach: []
};
